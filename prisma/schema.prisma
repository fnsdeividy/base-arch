// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @map("id")
  email         String   @unique @db.VarChar(255)
  password      String   @db.VarChar(255)
  firstName     String   @map("first_name") @db.VarChar(100)
  lastName      String   @map("last_name") @db.VarChar(100)
  phone         String?  @db.VarChar(20)
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  userRoles UserRole[]
  sessions  Session[]
  auditLogs AuditLog[]

  @@map("users")
}

model Role {
  id          String   @id @default(uuid()) @map("id")
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  isSystem    Boolean  @default(false) @map("is_system")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(uuid()) @map("id")
  name        String   @unique @db.VarChar(100)
  description String?  @db.Text
  resource    String   @db.VarChar(100)
  action      String   @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String   @map("role_id")
  permissionId String   @map("permission_id")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Session {
  id               String   @id @default(uuid()) @map("id")
  userId           String   @map("user_id")
  refreshTokenHash String   @map("refresh_token_hash") @db.VarChar(255)
  expiresAt        DateTime @map("expires_at") @db.Timestamptz(6)
  ipAddress        String?  @map("ip_address") @db.Inet
  userAgent        String?  @map("user_agent") @db.Text
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model AuditLog {
  id           String   @id @default(uuid()) @map("id")
  userId       String?  @map("user_id")
  action       String   @db.VarChar(100)
  resourceType String   @map("resource_type") @db.VarChar(100)
  resourceId   String?  @map("resource_id") @db.VarChar(100)
  details      Json?    @db.JsonB
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent") @db.Text
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model Store {
  id          String   @id @default(uuid()) @map("id")
  name        String   @db.VarChar(255)
  description String?  @db.Text
  address     String   @db.Text
  phone       String?  @db.VarChar(20)
  email       String?  @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  products Product[]
  stocks   Stock[]
  orders   Order[]

  @@map("stores")
}

model Product {
  id          String   @id @default(uuid()) @map("id")
  name        String   @db.VarChar(255)
  description String?  @db.Text
  sku         String   @unique @db.VarChar(100)
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  category    String   @db.VarChar(100)
  brand       String?  @db.VarChar(100)
  weight      Decimal? @db.Decimal(8, 3)
  dimensions  String?  @db.VarChar(100)
  isActive    Boolean  @default(true) @map("is_active")
  storeId     String   @map("store_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  stocks     Stock[]
  orderItems OrderItem[]

  @@map("products")
}

model Stock {
  id          String   @id @default(uuid()) @map("id")
  productId   String   @map("product_id")
  storeId     String   @map("store_id")
  quantity    Int      @default(0)
  minQuantity Int      @default(0) @map("min_quantity")
  maxQuantity Int?     @map("max_quantity")
  location    String?  @db.VarChar(100)
  status      String   @default("active") @db.VarChar(50)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([productId, storeId])
  @@map("stocks")
}

model Customer {
  id        String   @id @default(uuid()) @map("id")
  firstName String   @map("first_name") @db.VarChar(100)
  lastName  String   @map("last_name") @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  address   String?  @db.Text
  city      String?  @db.VarChar(100)
  state     String?  @db.VarChar(100)
  zipCode   String?  @map("zip_code") @db.VarChar(20)
  country   String?  @db.VarChar(100)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  orders   Order[]
  invoices Invoice[]

  @@map("customers")
}

model Order {
  id          String   @id @default(uuid()) @map("id")
  orderNumber String   @unique @map("order_number") @db.VarChar(100)
  customerId  String   @map("customer_id")
  storeId     String   @map("store_id")
  status      String   @default("pending") @db.VarChar(50)
  totalAmount Decimal  @map("total_amount") @db.Decimal(10, 2)
  discount    Decimal? @db.Decimal(10, 2)
  taxAmount   Decimal? @map("tax_amount") @db.Decimal(10, 2)
  notes       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  invoices   Invoice[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid()) @map("id")
  orderId   String   @map("order_id")
  productId String   @map("product_id")
  quantity  Int
  unitPrice Decimal  @map("unit_price") @db.Decimal(10, 2)
  discount  Decimal? @db.Decimal(5, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Invoice {
  id            String    @id @default(uuid()) @map("id")
  invoiceNumber String    @unique @map("invoice_number") @db.VarChar(100)
  orderId       String?   @map("order_id")
  customerId    String    @map("customer_id")
  status        String    @default("pending") @db.VarChar(50)
  dueDate       DateTime? @map("due_date") @db.Timestamptz(6)
  totalAmount   Decimal   @map("total_amount") @db.Decimal(10, 2)
  taxAmount     Decimal?  @map("tax_amount") @db.Decimal(10, 2)
  notes         String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  order    Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("invoices")
}
